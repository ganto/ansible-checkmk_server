{#
 # This template merges the users read from the original users.mk passed via
 # ``checkmk_server_fact_local_users`` with the users defined in the Ansible
 # inventory ``checkmk_server__multisite_users``. This is necessary as users
 # from remote directories such as LDAP or Active Directory are written down
 # to users.mk and obviously shouldn't be deleted by Ansible.
 #
 # ``checkmk_server__multisite_user_defaults`` is used to set some default
 # properties to new users defined in ``checkmk_server__multisite_users`` in
 # case they don't define the properties themselves.
 #
 # The ``multisite_users`` variable in users.mk is regular Python dictionary
 # where the user name and alias are unicode strings. All other strings are
 # regular Python 2 strings.
 #
 # The template tries to imitate the original variable formatting to avoid
 # rewriting users.mk in case no content change happened.
 #
 #}
{% set fact_user_list = [] %}
{% for unicode_user in checkmk_server_fact_local_users|d([]) %}
{%   set _ = fact_user_list.append(unicode_user | replace("u'", "'")) %}
{% endfor %}
{% set multisite_user_list = fact_user_list | union(checkmk_server__multisite_users|d({})|list) %}
# Written by Multisite UserDB
# encoding: utf-8

multisite_users = \
{{'{'}}{%
  for user in multisite_user_list | sort %}
{%  if not loop.first %}
{#
 # Indent subsequent user dictionaries to align with first user
 #}
 {% endif %}
u'{{ user }}': {{'{'}}{%
     set key_list = [] %}
{%   if user in checkmk_server_fact_local_users %}
{%     set _ = key_list.extend(checkmk_server_fact_local_users[user]|list) %}
{%   endif %}
{%   if user in checkmk_server__multisite_users %}
{%     set _ = key_list.extend(checkmk_server__multisite_users[user]|list) %}
{#
 # If the user is new, make sure to include the default property keys
 #}
{%     if user not in checkmk_server_fact_local_users %}
{%       set _ = key_list.extend(checkmk_server__multisite_user_defaults|d([])|list) %}
{%     endif %}
{%   endif %}
{#
 # Avoid setting properties only used by Ansible
 #}
{%   set key_list = key_list | difference(checkmk_server__ansible_user_keys|d([])) %}
{%   for key in key_list | unique | sort %}
{%     set value = none %}
{%     if user in checkmk_server_fact_local_users %}
{%       if key in checkmk_server_fact_local_users[user] %}
{%         set value = checkmk_server_fact_local_users[user][key] %}
{%       endif %}
{%     endif %}
{%     if user in checkmk_server__multisite_users %}
{%       if key in checkmk_server__multisite_users[user] %}
{%         set value = checkmk_server__multisite_users[user][key] %}
{%       endif %}
{%     endif %}
{#
 # If a value is not defined yet, get it from the defaults
 #}
{%     if value == none %}
{%       set value = checkmk_server__multisite_user_defaults[key] %}
{%     endif %}
{#
 # If the alias name is too long, the dict members are seperated by a line break
 #}
{%     if key == 'alias' %}
{%       if (value | length > 12) %}
{%         set line_break = True %}
{%       endif %}
{%     endif %}
{%     if not loop.first and line_break|d(False) %}
{#
 # Indent user dict members to align with alias key
 #}
            {%
       endif %}
'{{ key }}': {%
       if key == 'alias' %}
{#
 # Mark alias value as unicode string
 #}
u{%    endif %}
{#
 # Do some trickery to get the quotes and unicode characters right
 #}
{{ value | to_json | replace('"', "'") | replace("\\u00", "\\x") | replace('true', 'True') | replace('false', 'False') }}{%
       if not loop.last %}
,{%      if line_break|d(False) %}
{#
 # Insert a line break before the next dict member if requested
 #}

{%       else %}
 {%      endif %}
{%     endif %}
{%   endfor %}
{#
 # Final '}' to close the user dict
 #}
{{'}'}}{%
     if not loop.last %}
,
{%   endif %}
{% endfor %}
{#
 # Final '}' to close the multisite_users dict variable
 #}
{{'}'}}
